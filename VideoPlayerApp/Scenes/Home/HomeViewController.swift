//
//  HomeViewController.swift
//  VideoPlayerApp
//
//  Created by bora ateÅŸ on 25.04.2023.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import SnapKit
import Kingfisher

protocol HomeDisplayLogic: AnyObject {
    
    func displayGenres(viewModel: Home.FetchGenres.ViewModel)
    func displayeMovieList(viewModel: Home.FetchMovies.ViewModel)
    func displayedSliderList(viewModel: Home.FetchSlider.ViewModel)

}

class HomeViewController: UIViewController, HomeDisplayLogic {
 
    var interactor: HomeBusinessLogic?
    var router: (NSObjectProtocol & HomeRoutingLogic & HomeDataPassing)?

    var genres: [Home.FetchGenres.ViewModel.DisplayedGenres] = []
    var sliders: [Home.FetchSlider.ViewModel.DisplayedSliders] = []
    var movieList : [Home.FetchMovies.ViewModel.DisplayedMovies] = []
    
    private lazy var scrollView: CustomScrollview = {
        let scrollview = CustomScrollview()
        return scrollview
    }()
    
    private var sliderCollectionView: SliderCollectionview = .init()
    
      // MARK: Object lifecycle
    private lazy var tableView: ContentSizedTableView = {
        let tableView = ContentSizedTableView()
        tableView.isScrollEnabled = true
        tableView.layer.masksToBounds = true
        tableView.separatorStyle = .none
        tableView.backgroundColor = .clear
        tableView.delegate = self
        tableView.dataSource = self
        tableView.register(CategoriesCell.self, forCellReuseIdentifier: CategoriesCell.description())
        if #available(iOS 15.0, *) {
            tableView.sectionHeaderTopPadding = 0
        }
        return tableView
    }()
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
      
        setup()
    }
      
    // MARK: Setup
    private func setup() {
        let viewController = self
        let interactor = HomeInteractor()
        let presenter = HomePresenter()
        let router = HomeRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
        
        configureInteractor()
        layout()
    }
      
    // MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()

        configureInteractor()
        layout()
        
    }
         
    func configureInteractor() {
        
        let genrerequest = Home.FetchGenres.Request()
        interactor?.fetchGenres(request: genrerequest)
        
        let sliderRequest = Home.FetchSlider.Request()
        interactor?.sliderList(request: sliderRequest)
        
    }

    func displayGenres(viewModel: Home.FetchGenres.ViewModel) {
        // print("genres view model : \(viewModel)")
        genres = viewModel.displayedGenre
        DispatchQueue.main.async {
            self.tableView.reloadData()
            
        }
        
    }
    
    func displayeMovieList(viewModel: Home.FetchMovies.ViewModel) {
        print("movie list view model : \(viewModel)")

        movieList = viewModel.displayedMovieList
        
    }
    
    func displayedSliderList(viewModel: Home.FetchSlider.ViewModel) {
        sliders = viewModel.displayedSliders
        sliderCollectionView.configure(with: viewModel.displayedSliders)
       
    }
    
}


extension HomeViewController {
    
    func layout() {
        title = "MOVIE"
        view.backgroundColor = .white
        view.addSubview(scrollView)
        scrollView.snp.makeConstraints { maker in
            maker.top.bottom.equalTo(self.view.safeAreaLayoutGuide)
            maker.leading.equalTo(self.view.snp.leading)
            maker.trailing.equalTo(self.view.snp.trailing)
        }
        
        sliderCollectionView.heightAnchor.constraint(equalToConstant: 400).isActive = true
        scrollView.stackView.addArrangedSubview(sliderCollectionView)
        
        scrollView.stackView.addArrangedSubview(tableView)
                
    }
    
}

extension HomeViewController: UITableViewDelegate, UITableViewDataSource {
    
   
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return genres.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = self.tableView.dequeueReusableCell(withIdentifier: CategoriesCell.description(), for: indexPath) as! CategoriesCell
        cell.configure(with: genres[indexPath.row])
        cell.movieList = self.movieList
            
        cell.detailButton.addTarget(self, action: #selector(detailClicked), for: .touchUpInside)
        
        return cell
    }
    
    
    @objc func detailClicked() {
        print("detail clicked ...")
        
       // router?.routeToMovielistDetail(genreId: genreId, genreName: genreName)
        
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        tableView.deselectRow(at: indexPath, animated: true)
        let id = genres[indexPath.row].id
        let genreId = String(id)
        let genreName = genres[indexPath.row].name
        
        router?.routeToMovielistDetail(genreId: genreId, genreName: genreName)
        
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 100
    }
    
}

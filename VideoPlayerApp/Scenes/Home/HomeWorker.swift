//
//  HomeWorker.swift
//  VideoPlayerApp
//
//  Created by bora ateÅŸ on 25.04.2023.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

class HomeWorker {
    
    func getGenres(successCompletion: @escaping ((GenresResponse?, String?) -> Void) ) {
        
        let url = ApiUrls.genresUrl
        
        NetworkManager.shared.request(type: GenresResponse.self, url: url, method: .get) { (response) in
            
            switch response {
            case .success(let result):
                successCompletion(result,nil)
            case .failure(let error):
                print(error.localizedDescription)
                successCompletion(nil,error.localizedDescription)
            }
            
        }
        
    }
    
    func getMovieList(genreId: String, successCompletion: @escaping ((Movie?, String?) -> Void) ) {
        
        let path = ApiUrls.movieListUrl + "1"
        let urlPath = ApiUrls.moviesAdditionals + genreId
        let url = path + urlPath

        print("home movie list url : \(url)")
        
        
        NetworkManager.shared.request(type: Movie.self, url: url, method: .get) { (response) in
            
            switch response {
            case .success(let result):
                successCompletion(result,nil)
            case .failure(let error):
                print(error.localizedDescription)
                successCompletion(nil,error.localizedDescription)
            }
            
        }
        
    }
    
    func getSliderList(successCompletion: @escaping ((SliderResponse?, String?) -> Void) ) {
        
        let url = ApiUrls.sliderUrl
        
        NetworkManager.shared.request(type: SliderResponse.self, url: url, method: .get) { (response) in
            
            switch response {
            case .success(let result):
                successCompletion(result,nil)
            case .failure(let error):
                print("Error!")
                print(error.localizedDescription)
                successCompletion(nil,error.localizedDescription)
            }
            
        }
        
    }
    
    
}

//
//  VideoPlayerViewController.swift
//  VideoPlayerApp
//
//  Created by bora ate≈ü on 27.04.2023.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import AVFoundation
import SnapKit
import AVKit

protocol VideoPlayerDisplayLogic: AnyObject {
    
    func displayVideo(viewModel: VideoPlayer.FetchVideo.ViewModel)
}

class VideoPlayerViewController: UIViewController, VideoPlayerDisplayLogic {
  
    var interactor: VideoPlayerBusinessLogic?
  
    var router: (NSObjectProtocol & VideoPlayerRoutingLogic & VideoPlayerDataPassing)?
    var movieName: String? 
        
    private let contentView: UIView = {
       
        let view = UIView()
        view.backgroundColor = .black
        
        return view
    }()
    
    private let vmPlayer: UIView = {
        let view = UIView()
        view.backgroundColor = .black
        return view
    }()
    
    private let movieNameLabel: UILabel = {
        let label = UILabel()
        label.textColor = .white
        label.font = .boldSystemFont(ofSize: 20)
        label.numberOfLines = 0
        label.textAlignment = .center
        return label
    }()
        
    private var playerView = StreamingVideoPlayer()
    private var playerContainerView: UIView!

    var urlString : String = ""
   
    // MARK: Object lifecycle
   
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    
        setup()
    }
  
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        
        setup()
    }
  
    // MARK: Setup
    private func setup() {
        let viewController = self
        let interactor = VideoPlayerInteractor()
        let presenter = VideoPlayerPresenter()
        let router = VideoPlayerRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
  
    override func viewDidLoad() {
        super.viewDidLoad()
        
        layout()
        configureInteractor()
        setupVideoPlayer()
    }
    
    func setupVideoPlayer() {
        try? AVAudioSession.sharedInstance().setCategory(.playback, mode: .default, options: [])

        playerView.add(to: vmPlayer)
        guard let url = URL(string: urlString) else { return }

        playerView.play(url: url)
    }
    
    func runVideo() {
        
         guard let url = URL(string: urlString) else { return }
         
         let avPlayer = AVPlayer(url: url)
         let playerLayer = AVPlayerLayer(player: avPlayer)
         playerLayer.frame = self.view.bounds
         playerLayer.videoGravity = .resizeAspect
         self.view.layer.addSublayer(playerLayer)
         
         let avController = AVPlayerViewController()
         avController.player = avPlayer
         present(avController, animated: true) {
             avPlayer.play()
             
         }
    }

    func configureInteractor() {
        let request = VideoPlayer.FetchVideo.Request()
        interactor?.playerVideoRequest(request: request)
        
    }
 
    func displayVideo(viewModel: VideoPlayer.FetchVideo.ViewModel) {
        print("video url is : \(viewModel.displayedViewModel.showVideoUrl)")
  
        self.urlString = viewModel.displayedViewModel.showVideoUrl
        
        
    }
    
}

extension VideoPlayerViewController {
    
    func layout() {
        title = "Video Player"
        view.backgroundColor = .white
        view.addSubview(contentView)
        contentView.snp.makeConstraints { make in
            make.top.equalTo(self.view.safeAreaLayoutGuide).offset(30)
            make.leading.equalToSuperview()
            make.trailing.equalToSuperview()
            make.bottom.equalTo(self.view.safeAreaLayoutGuide)
            
        }
        contentView.addSubview(movieNameLabel)
        movieNameLabel.snp.makeConstraints { make in
            make.top.equalToSuperview().offset(20)
            make.leading.equalToSuperview().offset(20)
            make.trailing.equalToSuperview()
            make.height.equalTo(30)
        }
        contentView.addSubview(vmPlayer)
        vmPlayer.snp.makeConstraints { make in
            make.top.equalTo(self.movieNameLabel.snp.bottom).offset(20)
            make.leading.equalToSuperview()
            make.trailing.equalToSuperview()
            make.bottom.equalToSuperview().inset(50)
        }
        
        movieNameLabel.text = self.movieName
    }

}


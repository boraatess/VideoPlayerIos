//
//  SplashViewController.swift
//  VideoPlayerApp
//
//  Created by bora ate≈ü on 25.04.2023.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Lottie

protocol SplashDisplayLogic: AnyObject {
    
    func displaySomething(viewModel: Splash.Something.ViewModel.ReachabilityViewModel)    
}

class SplashViewController: UIViewController, SplashDisplayLogic {
    
    var interactor: SplashBusinessLogic?
    var router: (NSObjectProtocol & SplashRoutingLogic & SplashDataPassing)?
    private var animationView: LottieAnimationView?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
        
    }
    
    // MARK: Setup
    private func setup() {
        let viewController = self
        let interactor = SplashInteractor()
        let presenter = SplashPresenter()
        let router = SplashRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
        
    }
    
    // MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        
        print("splash screen")
        view.backgroundColor = .white
        doSomething()
        layout()
        
    }
   
    func showHome() {
        DispatchQueue.main.asyncAfter(deadline: .now()+5 ) {
            let vc = HomeViewController()
            let nav = UINavigationController(rootViewController: vc)
            nav.modalPresentationStyle = .fullScreen
            self.present(nav, animated: true)
        }
    }
    
    func doSomething() {
        let request = Splash.Something.Request()
        interactor?.doSomething(request: request)
        layout()
        
    }
    
    
    func displaySomething(viewModel: Splash.Something.ViewModel.ReachabilityViewModel) {
        print("reachability view model : \(viewModel)")
        //nameTextField.text = viewModel.name
        
        if viewModel.isReachable {
            showHome()
        }
        else {
            Utils.shared.showPopup(title: "Warning!", message: viewModel.networkStatus, view: self)
        }
    }
    
}

extension SplashViewController {
    
    func layout() {
        view.backgroundColor = .white
        
        configureAnimation()
        
    }
    
    func configureAnimation() {
        animationView = .init(name: "data")
        
        animationView!.frame = view.bounds
        
        // 3. Set animation content mode
        
        animationView!.contentMode = .scaleAspectFit
        
        // 4. Set animation loop mode
        
        animationView!.loopMode = .loop
        
        // 5. Adjust animation speed
        
        animationView!.animationSpeed = 0.5
        
        view.addSubview(animationView!)
        
        // 6. Play animation
        
        animationView!.play()
        
    }
    
}
